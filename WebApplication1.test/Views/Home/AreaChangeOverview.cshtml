@model List<WebApplication1.Models.AreaChange>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = "Overview";
}

<h2>Overview of Registered Changes</h2>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>GeoJSON</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model)
        {
            <tr>
                <td>@change.Id</td>
                <td>@change.GeoJson</td>
                <td>@change.Description</td>
            </tr>
        }
    </tbody>
</table>

<!-- Map container with defined height -->
<div id="map" style="height: 400px;"></div>

@section Scripts {
    <!-- Import Leaflet CSS and JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        // Initialize the map and set its initial view
        var map = L.map('map').setView([51.505, -0.09], 13); // Adjust coordinates and zoom as needed

        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Iterate over registered changes and add them to the map
        var changes = @Html.Raw(Json.Serialize(Model));

        changes.forEach(function (change) {
            // Parse the GeoJSON data and add it to the map
            var layer = L.geoJSON(JSON.parse(change.geoJson)).addTo(map);

            // Bind a popup with the change description
            layer.bindPopup(change.description);
        });
    </script>
}

